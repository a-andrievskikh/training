function sumAll(arr) {
  // Создаем переменную и добавляем в неё отсортированный по возрастанию входящий массив
  const sortedSourceArr = arr.sort((a, b) => a - b);
  // Создаем новый массив, в него попадут числа из исходного массива и промежуточные числа
  const fullArr = [];
  // Создаем цикл, в котором добавляем в новый массив числа, начиная с меньшего элемента массива
  // до самого большего элемента массива
  // Переменная i = первомый элемент отсортированного массива.
  // Цикл завершается, когда i станет равна последнему элементу отсортированного массива
  // Пока i меньше или не равна последнему элементу, i добавляется в наш ранее созданный массив fullArr
  // К i добавляется 1, если i все еще меньше последнего элемента массива, то цикл повторяется, каждый раз
  // добавляя число в наш массив, пока i не станет равна последнему элементу исходного массива
  // i = 1, i <= 4 ? нет, добавить i в новый массив, i + 1;
  // i = 2, i <= 4 ? нет, добавить i в новый массив, i + 1;
  // и т.д. пока i не станет равна 4, тогда цикл завершится.
  // в массиве fullArr у нас будут числа [1, 2, 3, 4];
  for (
    let i = sortedSourceArr[0];
    i <= sortedSourceArr[sortedSourceArr.length - 1];
    i++
  ) {
    fullArr.push(i);
  }
  // Создаем переменную, в которую положим все элементы, кроме первого и последнего из нового массива
  // (fullArr.slice(1, -1))
  // К ней применим метод .reduce((a, b) => a + b), чтобы получить сумму промежуточных чисел
  // В переменную запишется сумма 5, т.е. промежуточные числа 2 и 3 (1 и 4 мы обрезали методом .slice(1, -1))
  const intermediateNumbersSum = fullArr.slice(1, -1).reduce((a, b) => a + b);

  // Создаем переменную, в которую положим только крайние элементы (1 и 4)
  // Суммируем их sortedSourceArr.reduce((a, b) => a + b);
  // Получим 5 (1 + 4)
  const sideNumbersSum = sortedSourceArr.reduce((a, b) => a + b);

  // Суммируем значения переменных с суммой промежуточных чисел и с суммой крайних чисел
  // 5 + 5 И возвращаем из функции эту сумму
  // return 10;
  return intermediateNumbersSum + sideNumbersSum;
}

sumAll([1, 4]);
